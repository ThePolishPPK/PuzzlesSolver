import unittest, pudb
from _solve import Board, Block, BlockType

class BoardTest(unittest.TestCase):
	def test_parseGameID(self):
		board = Board.parseGameID("10x10:1.3.1/3/5.3/1.5/7/4/3.1.2/3.2/2.2/2/1.1.4/1.4/5.2/3.1/6/3/5/4/3.3/1.3")
		self.assertEqual(
			board.inRow,
			(
				(1,1,4),
				(1,4),
				(5,2),
				(3,1),
				(6,),
				(3,),
				(5,),
				(4,),
				(3,3),
				(1,3)
			)
		)
		self.assertEqual(
			board.inColumn,
			(
				(1,3,1),
				(3,),
				(5,3),
				(1,5),
				(7,),
				(4,),
				(3,1,2),
				(3,2),
				(2,2),
				(2,)
			)
		)

	def test_isValid(self):
		data = (
			("10x10:1/2.2/2.3/8/1.6/1.3/1/4.2/6.2/5.1/2/1.1.1/5.1/3.3/7/4.3/6.3/4.1/2/3", "0001100000010100001001111100100011100111000111111100111101111111110111011110000100000001100000000111", True),
			("10x10:1.3/3/1.3/1.2/3.1/3/2.5/8/8/6/1.1.3/1.4/3.4/3/3/3.4/9/4.4/2/1", "1000100111000010111100111011110000000111000000011111100011111111111110111101111000000001100000001000", False),
			("20x20:1.4.6.1/4.4/3.3/3.3.1.2/4.1.1.4/4.5.4/3.4/4.7/4.5.2/3.3.5/1.1.6/2.1.5/4.2.5/3.1.5/3.1.5/3.3.7/3.3.2.2/2.6.3.2/3.1.3.2.1/3.6.1.1/1.5.5/6.5/7.2.2/3.5/2.1.1/8.3/4.3.3.1.1/9.6.1/4.10/1.2.1.4/3.2.1.3/3.3.1/4.2.1/2.4.2.1/1.2.4/1.11/2.7/1.2.7/3.2.6/3.2.8", "1000111110000001111100011111100000011111000111111100000110110001110111110000000011000000010100000000111111110000000001111111011100000111010111111111100011111101000001111011111111110000010110001000111111100001100010000111111000011100010000001111000001101000000011000000011110110100100000000011000111101000000001111111111100001100011111110000100011000111111100000001110011001111110000011100110011111111", True),
			("15x15:3.2.3/3.3/4.3.3/2.6.3/2.1.3/1.2.5/1.3/4.3/2.1.1.1/1.3.3/3.1/5/7.2/11/11/6.1/5.2/3/4.2.1/1.3.4/1.1.6/2.1.6/2.7/2.4/1.3/1.1.1.2/1.4.2/8.1.3/8.3/7.2", "111111001000000111110001100000111000000000000001111011000100000101110001111000100010111111001100010111111001100001111111001100000001111100000000000111100001000100011000001011110011111111110100111111111110000111111111100000101", False),
		)
		for gameID, boardBlocks, status in data:
			board = Board.parseGameID(gameID)
			for x in range(0, board.Width*board.Height):
				board._map[x//board.Width][x%board.Width].type = BlockType.BLACK if boardBlocks[x] == '1' else BlockType.WHITE
			self.assertEqual(
				board.isValid(),
				status
			)






















if __name__ == "__main__":
	unittest.main()